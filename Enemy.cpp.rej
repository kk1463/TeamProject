diff a/Enemy.cpp b/Enemy.cpp	(rejected hunks)
@@ -21,7 +21,9 @@
 	en.rightMove = true;
 	
 	en.angry = false;
-	getPlayerPos = getPlayerAngle = 0;
+	getPlayerPos = getPlayerAngle = en.count=0;
+
+	
 
 
 	return S_OK;
@@ -37,7 +39,6 @@
 void Enemy::update() // ���ʹ̰� �����δ�.
 {
 
-
 	en.rc = RectMakeCenter(en.x, en.y, en.img->getFrameWidth(), en.img->getFrameHeight());
 	en.senseRC = RectMakeCenter(en.x, en.y, en.img->getFrameWidth() * 2, en.img->getFrameHeight() * 2);
 
@@ -56,25 +57,32 @@
 		RECT temp;		
 		RECT rc = _vPlayer[0]->getColRect();
 		int _playerDir = _vPlayer[0]->getPlayerDir();
-		if ((IntersectRect(&temp, &en.colRc, &rc)&&(en.angry)))
+		if ((IntersectRect(&temp, &en.colRc, &rc)))//&&(en.angry)))
 		{
 			en._enState = atk1;
-
+			break;
 		}
 		
+	cout << _playerDir << endl;
 	}
 
-	
-
-
-
-
-
-
-
-
 
+	if (en.hp < 0)
+	{
+		ENEMYMANAGER->eraseEnemy(this);
+	}
+	
+	if (en._enState != move1)
+	{
+		en.count++;
+		if (en.count > 20)
+		{
+			en._enState = move1;
+			en.count = 0;
+		}
+	}
 
+	
 
 }
 
@@ -83,9 +91,29 @@
 
 }
 
-void Enemy::attaked()
+void Enemy::attaked(int atk)
 {
-	ENEMYMANAGER->eraseEnemy(this);
+	en.count++;
+	
+	switch (en.Movecheck)
+	{
+	case 0:		
+		break;
+	case 1:
+		break;
+	case 2:
+		break;
+	case 3:
+		break;
+	}
+	
+	en._enState = hit1;
+	
+	
+	en.angry = true;
+	en.hp -= atk;
+	
+	
 }
 
 void Enemy::setTile(vector<tagTile*> ins) // ���ʹ̰� Ÿ���� ����� �״�.
